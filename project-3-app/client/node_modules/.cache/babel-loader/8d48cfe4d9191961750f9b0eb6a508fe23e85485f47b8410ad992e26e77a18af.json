{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\bootcamp\\\\project-3\\\\project-3-app\\\\client\\\\src\\\\components\\\\pages\\\\GamePage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Form from \"react-bootstrap/Form\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\n// import \"../../styles/gamePage.css\";\n\n// function GameSearch() {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch game suggestions when the search term changes\n//     async function fetchGameSuggestions() {\n//       try {\n//         if (searchTerm.trim() === \"\") {\n//           setSearchResults([]); // Clear results if the search term is empty\n//           return;\n//         }\n\n//         const response = await axios.get(\n//           \"https://api.rawg.io/api/games\",\n//           {\n//             params: {\n//               key: process.env.REACT_APP_RAWG_API_KEY,\n//               search: searchTerm,\n//               page_size: 10, // Limit the number of results\n//             },\n//           }\n//         );\n\n//         setSearchResults(response.data.results);\n//       } catch (error) {\n//         console.error(\"Error fetching game suggestions\", error);\n//       }\n//     }\n\n//     fetchGameSuggestions();\n//   }, [searchTerm]);\n\n//   const handleItemClick = (clickedItem) => {\n//     setSearchTerm(clickedItem.name); // Set the input value to the clicked item's name\n//     setSearchResults([]); // Clear the dropdown\n//   };\n\n//   return (\n//     <div className=\"game-search\">\n//       <h2>Game Search</h2>\n//       <Form>\n//         <Form.Group controlId=\"searchTerm\">\n//           <Form.Control\n//             type=\"text\"\n//             placeholder=\"Search for a game\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//         </Form.Group>\n//       </Form>\n//       <ListGroup>\n//         {searchResults.map((game) => (\n//           <ListGroup.Item key={game.id}\n//           onClick={() => handleItemClick(game)}>\n//             {game.name}\n//           </ListGroup.Item>\n//         ))}\n//       </ListGroup>\n//     </div>\n//   );\n// }\n\n// export default GameSearch;\n\nimport \"../../styles/gamePage.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport Form from \"react-bootstrap/Form\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameSearch() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false); // Track dropdown visibility\n  const searchInputRef = useRef(null); // Reference to the input field\n\n  useEffect(() => {\n    // Fetch game suggestions when the search term changes\n    async function fetchGameSuggestions() {\n      try {\n        if (searchTerm.trim() === \"\") {\n          setSearchResults([]); // Clear results if the search term is empty\n          return;\n        }\n        const response = await axios.get(\"https://api.rawg.io/api/games\", {\n          params: {\n            key: process.env.REACT_APP_RAWG_API_KEY,\n            search: searchTerm,\n            page_size: 10 // Increase the number of results\n          }\n        });\n\n        setSearchResults(response.data.results);\n        setShowDropdown(true); // Show the dropdown when there are results\n      } catch (error) {\n        console.error(\"Error fetching game suggestions\", error);\n      }\n    }\n    fetchGameSuggestions();\n  }, [searchTerm]);\n  const handleItemClick = clickedItem => {\n    setSearchTerm(clickedItem.name);\n    setSearchResults([]);\n    setShowDropdown(false); // Close the dropdown when an item is clicked\n  };\n\n  useEffect(() => {\n    // Add event listener to detect clicks outside the component\n    function handleClickOutside(event) {\n      if (searchInputRef.current && !searchInputRef.current.contains(event.target)) {\n        setShowDropdown(false); // Close the dropdown when clicking outside\n      }\n    }\n\n    window.addEventListener(\"click\", handleClickOutside);\n    return () => {\n      // Remove the event listener when the component unmounts\n      window.removeEventListener(\"click\", handleClickOutside);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"searchTerm\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Search for a game\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value),\n          onFocus: () => setShowDropdown(true) // Show the dropdown on focus\n          ,\n          ref: searchInputRef // Set a ref to the input field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-dropdown\",\n      children: /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: searchResults.map(game => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          onClick: () => handleItemClick(game),\n          children: game.name\n        }, game.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(GameSearch, \"4tyHpn63250gA7E/QNR1QJbI7qc=\");\n_c = GameSearch;\nexport default GameSearch;\nvar _c;\n$RefreshReg$(_c, \"GameSearch\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Form","ListGroup","jsxDEV","_jsxDEV","GameSearch","_s","searchTerm","setSearchTerm","searchResults","setSearchResults","showDropdown","setShowDropdown","searchInputRef","fetchGameSuggestions","trim","response","get","params","key","process","env","REACT_APP_RAWG_API_KEY","search","page_size","data","results","error","console","handleItemClick","clickedItem","name","handleClickOutside","event","current","contains","target","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","Control","type","placeholder","value","onChange","e","onFocus","ref","map","game","Item","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/Daniel/bootcamp/project-3/project-3-app/client/src/components/pages/GamePage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Form from \"react-bootstrap/Form\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\n// import \"../../styles/gamePage.css\";\n\n// function GameSearch() {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch game suggestions when the search term changes\n//     async function fetchGameSuggestions() {\n//       try {\n//         if (searchTerm.trim() === \"\") {\n//           setSearchResults([]); // Clear results if the search term is empty\n//           return;\n//         }\n\n//         const response = await axios.get(\n//           \"https://api.rawg.io/api/games\",\n//           {\n//             params: {\n//               key: process.env.REACT_APP_RAWG_API_KEY,\n//               search: searchTerm,\n//               page_size: 10, // Limit the number of results\n//             },\n//           }\n//         );\n\n//         setSearchResults(response.data.results);\n//       } catch (error) {\n//         console.error(\"Error fetching game suggestions\", error);\n//       }\n//     }\n\n//     fetchGameSuggestions();\n//   }, [searchTerm]);\n\n//   const handleItemClick = (clickedItem) => {\n//     setSearchTerm(clickedItem.name); // Set the input value to the clicked item's name\n//     setSearchResults([]); // Clear the dropdown\n//   };\n\n//   return (\n//     <div className=\"game-search\">\n//       <h2>Game Search</h2>\n//       <Form>\n//         <Form.Group controlId=\"searchTerm\">\n//           <Form.Control\n//             type=\"text\"\n//             placeholder=\"Search for a game\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//         </Form.Group>\n//       </Form>\n//       <ListGroup>\n//         {searchResults.map((game) => (\n//           <ListGroup.Item key={game.id}\n//           onClick={() => handleItemClick(game)}>\n//             {game.name}\n//           </ListGroup.Item>\n//         ))}\n//       </ListGroup>\n//     </div>\n//   );\n// }\n\n// export default GameSearch;\n\nimport \"../../styles/gamePage.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport Form from \"react-bootstrap/Form\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nfunction GameSearch() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false); // Track dropdown visibility\n  const searchInputRef = useRef(null); // Reference to the input field\n\n  useEffect(() => {\n    // Fetch game suggestions when the search term changes\n    async function fetchGameSuggestions() {\n      try {\n        if (searchTerm.trim() === \"\") {\n          setSearchResults([]); // Clear results if the search term is empty\n          return;\n        }\n\n        const response = await axios.get(\n          \"https://api.rawg.io/api/games\",\n          {\n            params: {\n              key: process.env.REACT_APP_RAWG_API_KEY,\n              search: searchTerm,\n              page_size: 10, // Increase the number of results\n            },\n          }\n        );\n\n        setSearchResults(response.data.results);\n        setShowDropdown(true); // Show the dropdown when there are results\n      } catch (error) {\n        console.error(\"Error fetching game suggestions\", error);\n      }\n    }\n\n    fetchGameSuggestions();\n  }, [searchTerm]);\n\n  const handleItemClick = (clickedItem) => {\n    setSearchTerm(clickedItem.name);\n    setSearchResults([]);\n    setShowDropdown(false); // Close the dropdown when an item is clicked\n  };\n\n  useEffect(() => {\n    // Add event listener to detect clicks outside the component\n    function handleClickOutside(event) {\n      if (\n        searchInputRef.current &&\n        !searchInputRef.current.contains(event.target)\n      ) {\n        setShowDropdown(false); // Close the dropdown when clicking outside\n      }\n    }\n\n    window.addEventListener(\"click\", handleClickOutside);\n\n    return () => {\n      // Remove the event listener when the component unmounts\n      window.removeEventListener(\"click\", handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className=\"game-search\">\n      <h2>Game Search</h2>\n      <Form>\n        <Form.Group controlId=\"searchTerm\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Search for a game\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            onFocus={() => setShowDropdown(true)} // Show the dropdown on focus\n            ref={searchInputRef} // Set a ref to the input field\n          />\n        </Form.Group>\n      </Form>\n      {showDropdown && (\n        <div className=\"search-dropdown\">\n          <ListGroup>\n            {searchResults.map((game) => (\n              <ListGroup.Item\n                key={game.id}\n                onClick={() => handleItemClick(game)}\n              >\n                {game.name}\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}